[
{
	"uri": "/games/",
	"title": "Games",
	"tags": [],
	"description": "Some games I built &amp; collaborated on",
	"content": " Derby Derby is an arcade racing / demolition derby game that uses a mostly pure Entity Component System. While there is no dedicated website for the game right now, you can certainly follow progress on my Dev Blog and the following related repos!\nTarget platforms include:\n PC / Mac / Linux [Primary] Xbox One / Nintendo Switch [Secondary]     Repos Link     Arcade Vehicle Controller Github   Common Structures Github    Modern Knights Modern Knights is a WIP third person strategy/action game I\u0026rsquo;m currently working on at initialPrefabs.\nTarget platforms include:\n PC Mac Linux Nintendo Switch  Kitty in the Box Franchise The Kitty in the Box franchise are a series of games for iOS, Android, Windows Phone, and HTC Vive, where you train your kitty to leap into boxes!\n   Presskit Product     Kitty in the Box 2 Android   Kitty in the Box 2 iOS   Kitty in the Box VR N/A    Connect Four In my graduate AI class, I built with Allen Kim, a Connect Four game. The game uses different exploration/exploitation algorithms to create a competitive AI. The bots include:\n Random Minimax Minimax with Alpha-Beta pruning Monte Carlo Tree Search     Source Demo     Github Connect-4    Cubeball Cubeball is a local multiplayer soccer game which tied for third place at the CUNY Hackathon. Cubeball attempts to democratize gaming by having players use their own phones as a controller! Each player controls a cube avatar and attempts to push the ball into the goal. Players texted their inputs to a server to control their avatars.\n   Source Demo     Github N/A    Viacom Dora Viacom Dora is a 2D point and click scavenger game designed for kids built at Hack BU, which won 2nd place in the best Media Hack. Players collect as many items as they can within the time limit and are transitioned into a page where they can record themselves speak the Spanish equivalent of the item they collected. From there, players can replay their own recording and compare it with the actual Spanish word.\n   Source Demo     Github Must be cloned and built    Battle Blocks Royale Battle Blocks Royale was a project I lead in ACM Gamedev session where I taught beginners the basics of game development and architectural design. It is a third person top down arena game where cubes fight each other.\nThis game features the use of a delegate and static event system to handle:\n shooting healing power ups UI     Source Demo     Bitbucket Battle Blocks Royale    "
},
{
	"uri": "/notes/",
	"title": "Notes",
	"tags": [],
	"description": "Some notes I compiled which can be used",
	"content": " Here are a few notes I compiled in their accompanying links and github repositories.\nTopics  Vector Math  "
},
{
	"uri": "/notes/vector-math/",
	"title": "Vector Math",
	"tags": [],
	"description": "Math utility functions I found helpful with development",
	"content": " While building games, here are a series of math functions which I found incredibly useful. For the below content to be relevant to Unity, you can find the git submodule below:\n Math-Utils  Table of Contents  Vectors  Basics of Position \u0026amp; Direction More Fun Things With Direction  Direction Relative Of    Vectors Vectors represent any object which has a magnitude and a position. Consider the cartesian coordinate system on a 3D plane which is usually denoted by like the following (x, y, z).\nBasics of Position \u0026amp; Direction A standalone vector can simply represent a point in some space and that\u0026rsquo;s it. To get any other pieces of info from that standalone vector, there should be more vectors to derive more info.\nConsider two vectors,\n A (-1, 0, 0) B (0, 0, 1)  the direction from A -\u0026gt; B is simply the subtraction of B - A, (-1, 0, 1). To get the inverse direction, simply reverse the order of subtraction to A - B.\nThe formula for getting a direction from a source to a destination is simply: direction = destination - source  Additionally, if we have a point and a direction we can find the source or destination point in the following manner.\nFinding the source: source = destination - direction Finding the destination: destination = source + direction  More Fun Things With Direction Now that the basics are out of the way we can do more complicated things with direction. Imagine building an in-game agent which has to steer towards a particular direction.\nGiven 2 directions, we can find the angle between them (additionally, this means that we supposedly have 3+ positions used to calculate the 2 directions).\nThis is usually denoted by the following:\ncos (theta) = (A . B) / (||A|| + ||B||)  where,\n A and B is a directional vector . means the dot product of the two vectors ||A|| and ||B|| means the magnitude of the vectors A and B  When getting the value theta, do note that theta is in radians. Since, it is easier to think in terms of °, we can multiply:\ndegrees = (theta) * 180/PI  The angle returned is most likely an acute angle, meaning the range is between 0° and 180°. So, an angle of 270° will return 90°.\n Direction Relative Of Imagine having a chair to the left of you, you know the chair is clearly left of you because it\u0026rsquo;s next to your left hand. Now if you turned 90° to the right, is the chair still left of your relative forward? No, it\u0026rsquo;s now behind you. Using this concept, we can determine the relative direction of a destination to its source in local space.\nIf we use the aforementioned formula stated above, we can just get an acute angle, since 270° is really just -90°. Of course, we can try to modify the math to convert -90° to 270°, or we can just determine the sign to make determining the relative direction less complicated. To do this, we need the:\n cross product dot product  With two directions, by finding the cross product we determine a vector perpendicular two the directions. As such, determining the dot product between a normal vector and the perpendicular vector will determine the sign.\nDot products returns a scalar value from two vectors. When a dot product is:\n 0, then we know that the direction and the normal is perpendicular. 1, then we know that the angle between the direction and the normal is less than 90 degrees. -1, then we know that the angle between the direction and the normal is greater than 90 degrees.   The pseudocode of a function can be written as below to help determine if a position in 3D space is left, right, forward, or backward of a relative forward direction.\nint GetRelativeDirection(vector3 forward, vector3 direction, vector3 normal) { var perpendicular = cross(forward, direction); var relativeDirection = dot(perpendicular, normal); var sign = 0; if (relativeDirection \u0026gt; 0.0) sign = 1; else if (relativeDirection \u0026lt; 0f) sign = -1; return sign; }  Therefore a position left of the forward would return as -1 and a position right of the forward would return as 1.\nVisualizations of these transformations are coming! I just need more time to compile it and create gifs.\n "
},
{
	"uri": "/games/derby/",
	"title": "Derby",
	"tags": [],
	"description": "An arcade demolition derby and racing game.",
	"content": " Derby is an arcade demolition derby racing game. You can either win by racing legitimately or by destroying every other vehicle. Each vehicle has its own custom physics defined, meaning some vehicles will have much better handling than others. Win a race legitimately or waste other vehicles by running into them and win by default!\nDerby is still in early development and uses Unity\u0026rsquo;s preview of the Entity Component System, so stay tuned for more details!\nScreenshots/Gifs/Videos  ![vehicle-system](/images/derby/ECSVehicleSystem.gif) --- ![visualization](/images/derby/ECSVehicleSystemTrimmedVisualization.gif) --- ![inspector-tools](/images/derby/derby-unique-selection.gif)       function initSlides() { Reveal.initialize({ embedded : true, controls : \"true\", center: \"10\" ,\thistory: false , progress: \"true\" , transition: \"concave\", dependencies: [ { src: '\\/revealjs\\/lib\\/js\\/classList.js\"', condition: function() { return !document.body.classList; } }, { src: '\\/revealjs\\/plugin\\/markdown\\/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/revealjs\\/plugin\\/markdown\\/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/revealjs\\/plugin\\/highlight\\/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '\\/revealjs\\/plugin\\/zoom-js\\/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '\\/revealjs\\/plugin\\/notes\\/notes.js', async: true, condition: function() { return !!document.body.classList; } } ] }); }   See it fullscreen var toto = document.getElementById('slideContent').innerHTML document.getElementById('slideFrame').contentWindow.document.write(document.getElementById('slideContent').innerHTML); document.getElementById('slideContent').remove(); document.addEventListener(\"DOMContentLoaded\",function(){ setTimeout(function () { document.getElementById('slideFrame').contentWindow.initSlides() ; }, 2000); }); function slideFullScreen() { document.open(); document.write(toto); document.close(); initSlides() }  Use the left and right arrows to pan through the gallery.\n"
},
{
	"uri": "/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "About Me",
	"tags": [],
	"description": "Stuff about me",
	"content": " About Me I graduated with a B.S. in Computer Science from the City College of New York. I am a former backend Software Engineer at Scholastic, Inc and currently a Game Developer/Tinkerer at initialPrefabs.\nTechnical languages I\u0026rsquo;ve primarily been working with include and am heavily interested in are:\n C++ C# Rust Java Python  My primary interests include:\n Optimization/Parallelization Game AI Graphics Data Visualization within Games  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tools/",
	"title": "Tools",
	"tags": [],
	"description": "Some tools I&#39;ve built &amp; collaborated on",
	"content": " Dani AI Dani AI is a customizable node based decision engine for building game AI in a human like way. I largely took part in the theory and runtime implementation of the tool which includes:\n Fuzzy Logic Implementation Neuron Based Workflow Shifting the design paradigm to a Data Oriented Design  You can find the complete details here.\nDeveloper Console The Developer Console is a minimalistic Unity tool which allows any game to have an in-game console. This allows any user and game to customize the game\u0026rsquo;s behaviour in play mode/runtime. Inspirations for this came from games like CSGO and The Elder Scroll/Fallout series.\nFeatures:\n Global Event System Relative Object Event System Command Line/Unix like Console Inputs Customizable UI  This project is very much still a WIP but you can find the repository here. Tutorials, documentations, and an Asset Store release are coming soon!\nPreview "
}]